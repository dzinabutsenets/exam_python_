# Задача:
# Дан проект в котором реализован веб-сайт. Сайт должен быть переведен на несколько языков, перевод осуществляется с помощью метки i18n
# Проблема: часта разработчики забывают добавить эти метки к html тегам
# Задача: нужно проверить что все html теги: p, button, h2, h, имеют метку i18n
# ######Пример:
# javascript<p i18n>Дата</p> - правильно
# javascript<p>Дата</p> - неправильно
# Для более полного понимания, где храниться ошибка, нужно выводить следующую информацию Файл номер строчки: строка в которой есть ошибка
#
#
#
# 1.Алгоритм:
# Подготовка:
# 1.1. Импортировать необходимые модули (os, re).
# 1.2. Определить регулярные выражения:
# - Для поиска открывающих тегов без атрибута i18n.
# - Для поиска закрывающих тегов, которые содержат что-либо кроме пробелов после имени тега и перед >.
#
# 2.Поиск ошибок:
# 2.1. Прочитать содержимое HTML-файла.
# 2.2. Разделить содержимое на строки.
# 2.3. Для каждой строки:
# - Найти соответствия открывающему регулярному выражению.
# - Найти соответствия закрывающему регулярному выражению.
# - Если найдены соответствия, сохранить номер строки и соответствующую ошибку в список ошибок.
#
# 3.Анализ директории:
# 3.1. Пройтись по каждому файлу в указанной директории (и поддиректориях) с использованием os.walk.
# 3.2. Если расширение файла .html, открыть и прочитать файл.
# 3.3. Вызвать функцию поиска ошибок для содержимого файла.
# 3.4. Вывести ошибки на экран.
#
# 4.Вывод ошибок:
# 4.1. Для каждой найденной ошибки:
# - Вывести путь к файлу и номер строки.
# - Определить тип ошибки (основываясь на содержании ошибки) и вывести соответствующее сообщение.
# - Вывести разделитель.
#
# 5.Запуск:
# 5.1. Вызвать главную функцию, передав в качестве параметра текущую директорию или любую другую директорию, которую вы хотите проверить.




import os
import re

def find_errors_in_html(content, file_path):
    """
    Поиск ошибок в HTML-содержимом.

    :param content: Содержимое HTML-файла (str).
    :param file_path: Путь к файлу (используется только для справки, str).
    :return: Список ошибок с номерами строк и самими ошибками [(int, str)].
    """
    errors = []

    # Ищем открывающие теги без атрибута i18n
    pattern_open = re.compile(r'<(p|button|h2|h)(?![^>]*\bi18n\b)[^>]*>')

    # Ищем закрывающие теги, содержащие символы кроме пробелов после имени тега
    pattern_close = re.compile(r'</\s*(p|button|h|h2)[a-zA-Z0-9]+\s*>')

    # Разбиваем содержимое файла на строки
    lines = content.splitlines()

    # Проходим по каждой строке, ищем ошибки и сохраняем их
    for line_number, line in enumerate(lines, 1):
        matches_open = pattern_open.finditer(line)
        matches_close = pattern_close.finditer(line)

        for match in matches_open:
            errors.append((line_number, match.group()))
        for match in matches_close:
            errors.append((line_number, match.group()))

    return errors

def main(directory_path):
    """
    Главная функция, проходит по всем HTML-файлам в указанной директории
    и выводит ошибки, связанные с отсутствием атрибута i18n или
    неправильными закрывающими тегами.

    :param directory_path: Путь к директории с HTML-файлами (str).
    """
    for root, _, files in os.walk(directory_path):
        for file_name in files:
            # Обрабатываем только HTML-файлы
            if file_name.endswith('.html'):
                file_path = os.path.join(root, file_name)
                with open(file_path, 'r', encoding='utf-8') as file:
                    content = file.read()
                    errors = find_errors_in_html(content, file_path)
                    for line_number, error in errors:
                        print(f"Ошибка в файле: {file_path}")
                        print(f"Строка №{line_number}: {error}")
                        if '</' in error:
                            print("Проблема: Найден закрывающий тег с атрибутами или неправильной структурой.")
                            print("Решение: Убедитесь, что закрывающие теги не содержат атрибутов.")
                        else:
                            print("Проблема: Отсутствует атрибут i18n в открывающем теге.")
                            print("Решение: Добавьте атрибут i18n к открывающему тегу.")
                        print('-' * 80)  # Разделительная линия между ошибками

if __name__ == "__main__":
    main("..")
